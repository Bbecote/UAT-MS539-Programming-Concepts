
Hypothesis: 
1. Given a betting strategy, we can determine what the average win and loss amount is.
2. If we set our Win Walk and Loss Walk amounts accordingly, we can maximize the likelihood of maintaining winnings.

Functions:

**Set up Player Strategy and Bankroll implimentation

Create the Table Object
Create the Dice Object
Create the Players - pop up for user entry?


COME OUT ROLL
Button_is_OFF_Roll()
1. PLAYERS - Players Bet
2. DICE - Die is Rolled
3. TABLE - Last Roll Updated
4. TABLE - Update Table (Make Payments/Collect lost bets)

-- Field_Check() if a 2, 3, 4, 9, 10, 11, 12 is rolled
   Pay the field
   if not, collect from the field  

-- if 7 or 11 is rolled --
   Make_Payments() pay the pass line
      Update bankrolls depending on strategy
   
-- if 2 or 3 is rolled -- 
   Collect_Lost_Bets() 
   collect from the don't pass line 
  
-- if another number is rolled --
   Set Button() set the button ON at that number

5. PLAYER - Players Bet()

6. Roll Dice Again

Button is ON
Button_is_ON_Roll()
1. PLAYERS - Players Bet
2. DICE - Die is Rolled
3. TABLE - Last Roll Updated
4. TABLE - Update Table (Make Payments/Collect lost bets)
-- Field_Check() if a 2, 3, 4, 9, 10, 11, 12 is rolled
   Pay the field
   if not, collect from the field  

-- if 7 is rolled --
   Make_Payments() 
      Pay the COME line bets
	  Pay the Don't Pass Bets
	  
   Collect all other lost bets

-- if 11 is rolled --
    Make Payments()	     

-- if 2 or 3 is rolled -- 
   Collect_Lost_Bets() 
   collect from the don't pass line
  
-- if another number is rolled --
   Set Button() set the button ON at that number

5. PLAYER - Players Bet()


== GLOBAL VARIABLES ==
LAST_ROLL
ROLL_COUNT 


== CLASSES ==

-- PLAYER --
- Attributes -
Has Dice (Should mandate a Pass or Don't Pass Bet, implimenting will require the ability to pass the dice)

[user entered)
Bank Roll
Minimum Bet
Placement Strategy (implimented in the STRATEGIES class)
Beting Strategy (implimented in the STRATEGIES class)
Win Walk
Loss Walk

[calculated]
Current Standings
Active Bets

[historicals]
Active Bet History (Each Roll)
Standings History (Between Each Come out Roll)
  Win Average (Between Each Come out Roll)
  Loss Average (Between Each Come out Roll)
  
- Functions -
Player_Bet() Cycle through a data structure of Players, players places an active bets (automatically based on strategy), withdraws from bankroll, adds to the table amount.  Users may select Player to manually bet (STRATEGIES: Free_Play).
           






-- DICE --
- Attributes -
Last Roll
Roll History

- Functions -
Roll Dice 
   Check if button is ON or OFF 
      Button_is_OFF_Roll()
	  Button_is_ON_Roll()

-- TABLE --
- Attributes -
Button On/Off (Places the ON button at the corresponding number or OFF to the side)
Active Bets (Data Structures that manage the amounts of bets each player has made)
Active Player Roll Length (mean median mode)

- Functions -
Make Payments()
   Cycle through table bets, determine whose bet, they're strategy, and apply payment accordingly and update bankrolls
Collect Lost Bets()
   Cycle through table bets, take bet, update bankrolls
Update Bankrolls ()
Set Button()
   If button was OFF, set it ON to the last roll 
   If button was ON, set it OFF




- Functions -
Add to Amount (activated by clicking on the chips)
Add to Bet (activated by clicking on the table bet)
Subtract Bet (activated by clicking on the table bet)
Add Player
Clear Table
Reset Game

-- STRATEGIES --
Impliment the various strategies used by players



- Statistics -
TODO


